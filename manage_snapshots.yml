---
- name: Manage Story Snapshots
  hosts: localhost
  become: yes
  vars:
    action: "{{ action | default('download') }}"
    snapshot_type: "{{ snapshot_type | default('pruned') }}"
    pruned_url_base: "https://server-3.itrocket.net/testnet/story"
    archive_url_base: "https://server-5.itrocket.net/testnet/story"
    home_dir: "/root/.story"
    snapshot_dir: "/root/snapshots"

  tasks:
    - name: Install dependencies
      apt:
        name:
          - curl
          - jq
          - lz4
          - aria2
        state: present

    - name: Create snapshot directory
      file:
        path: "{{ snapshot_dir }}"
        state: directory
        mode: '0755'

    - block:
        - name: Get latest snapshot filenames
          uri:
            url: "{{ (snapshot_type == 'pruned') | ternary(pruned_url_base, archive_url_base) }}"
            return_content: yes
          register: snapshot_page

        - name: Extract snapshot filenames
          set_fact:
            story_snapshot: "{{ snapshot_page.content | regex_findall('story_\\d{4}-\\d{2}-\\d{2}_\\d+_snap\\.tar\\.lz4') | sort | last | default('') }}"
            geth_snapshot: "{{ snapshot_page.content | regex_findall('geth_story_\\d{4}-\\d{2}-\\d{2}_\\d+_snap\\.tar\\.lz4') | sort | last | default('') }}"

        - name: Fail if no snapshots are found during download
          fail:
            msg: "No snapshot files found for download."
          when: story_snapshot == '' or geth_snapshot == ''

        - name: Download snapshots
          get_url:
            url: "{{ (snapshot_type == 'pruned') | ternary(pruned_url_base, archive_url_base) }}/{{ item }}"
            dest: "{{ snapshot_dir }}/{{ item }}"
          loop:
            - "{{ story_snapshot }}"
            - "{{ geth_snapshot }}"

        - name: Display download completion message
          debug:
            msg: "Download of {{ snapshot_type }} snapshot has been completed successfully. Files are stored in {{ snapshot_dir }}."
      when: action == "download"

    - block:
        - name: Get story snapshot filename
          shell: "ls {{ snapshot_dir }}/story_*.tar.lz4 | head -n 1"
          register: story_snapshot_result

        - name: Get geth snapshot filename
          shell: "ls {{ snapshot_dir }}/geth_story_*.tar.lz4 | head -n 1"
          register: geth_snapshot_result

        - name: Set snapshot filenames
          set_fact:
            story_snapshot: "{{ story_snapshot_result.stdout | basename }}"
            geth_snapshot: "{{ geth_snapshot_result.stdout | basename }}"

        - name: Debug snapshot filenames
          debug:
            msg:
              - "Story snapshot: {{ story_snapshot }}"
              - "Geth snapshot: {{ geth_snapshot }}"

        - name: Fail if no snapshots are found for import
          fail:
            msg: "No snapshot files found in {{ snapshot_dir }}"
          when: story_snapshot == '' or geth_snapshot == ''

        - name: Stop story and story-geth services
          systemd:
            name: "{{ item }}"
            state: stopped
          loop:
            - story-consensus-node
            - story-geth-node

        - name: Backup priv_validator_state.json
          copy:
            src: "{{ home_dir }}/story/data/priv_validator_state.json"
            dest: "{{ home_dir }}/story/priv_validator_state.json.backup"
            remote_src: yes

        - name: Remove old data
          file:
            path: "{{ item }}"
            state: absent
          loop:
            - "{{ home_dir }}/story/data"
            - "{{ home_dir }}/geth/odyssey/geth/chaindata"

        - name: Extract Story snapshot
          shell: "lz4 -dc {{ snapshot_dir }}/{{ story_snapshot }} | tar -xf - -C {{ home_dir }}/story"

        - name: Extract Geth snapshot
          shell: "lz4 -dc {{ snapshot_dir }}/{{ geth_snapshot }} | tar -xf - -C {{ home_dir }}/geth/odyssey/geth"

        - name: Restore priv_validator_state.json
          copy:
            src: "{{ home_dir }}/story/priv_validator_state.json.backup"
            dest: "{{ home_dir }}/story/data/priv_validator_state.json"
            remote_src: yes

        - name: Remove snapshot files
          file:
            path: "{{ snapshot_dir }}/{{ item }}"
            state: absent
          loop:
            - "{{ story_snapshot }}"
            - "{{ geth_snapshot }}"

        - name: Start story and story-geth services
          systemd:
            name: "{{ item }}"
            state: started
          loop:
            - story-consensus-node
            - story-geth-node

        - name: Display import completion message
          debug:
            msg: "Import of {{ snapshot_type }} snapshot has been completed successfully. Snapshot files have been removed."
      when: action == "import"

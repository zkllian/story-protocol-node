---
- name: Install Story Protocol Validator Node
  hosts: all
  become: true
  gather_facts: true

  vars:
    GO_VERSION: "1.22.3"
    geth_version: "0.10.1"
    story_version: "0.13.0"
    home_dir: "/root"
    APP_HOME: "/root/.story"
    ADDRBOOK_URL: "https://server-5.itrocket.net/testnet/story/addrbook.json"
    ADDRBOOK_FILE: "{{ APP_HOME }}/story/config/addrbook.json"
    PEERS_URL: "https://story-testnet-rpc.itrocket.net/net_info"
    SNAPSHOT_BASE_URL: "https://server-3.itrocket.net/testnet/story/"
    project_name: "story"  
    STORY_CHAIN_ID: "odyssey"
    STORY_PORT: "26"
    WALLET_BACKUP_DIR: "/root/wallets-story-backup"

  vars_prompt:
    - name: moniker
      prompt: "Enter the moniker for the node"
      private: false

  tasks:
    - name: Display initial progress
      debug:
        msg: "Starting Story node installation. Progress: 5%"

    - name: Technical prerequisites analysis
      block:
        - name: Check for existing installation
          stat:
            path: "{{ APP_HOME }}"
          register: existing_installation

        - name: Stop Story services if running
          systemd:
            name: "{{ item }}"
            state: stopped
          loop:
            - story-consensus-node
            - story-geth-node
          ignore_errors: yes
          when: existing_installation.stat.exists

        - name: Backup existing configuration if present
          block:
            - name: Create backup directory
              file:
                path: "{{ WALLET_BACKUP_DIR }}"
                state: directory
                mode: '0700'

            - name: Backup key files
              copy:
                src: "{{ item }}"
                dest: "{{ WALLET_BACKUP_DIR }}/"
                remote_src: yes
              with_items:
                - "{{ APP_HOME }}/story/config/private_key.txt"
                - "{{ APP_HOME }}/story/config/priv_validator_key.json"
                - "{{ APP_HOME }}/story/config/node_key.json"
                - "{{ APP_HOME }}/story/data/priv_validator_state.json"
              ignore_errors: yes

            - name: Create backup manifest
              copy:
                content: "{{ ansible_date_time.iso8601 }}"
                dest: "{{ WALLET_BACKUP_DIR }}/backup_timestamp"

            - name: Display backup message
              debug:
                msg: "Configuration backed up to {{ WALLET_BACKUP_DIR }}"
          when: existing_installation.stat.exists

        - name: Remove existing installation
          file:
            path: "{{ APP_HOME }}"
            state: absent
          when: existing_installation.stat.exists

        - name: Display removal message
          debug:
            msg: "Existing installation removed. Keys backed up to {{ WALLET_BACKUP_DIR }} if they existed."
          when: existing_installation.stat.exists

    - name: Display progress after prerequisites
      debug:
        msg: "Progress: 15% - Prerequisites checked"

    - name: Update system
      apt:
        update_cache: yes
        upgrade: yes

    - name: Display progress after system update
      debug:
        msg: "Progress: 15% - System updated"

    - name: Install dependencies
      apt:
        name:
          - curl
          - wget
          - jq
          - build-essential
          - tar
          - lz4
          - pv
          - aria2
        state: present

    - name: Display progress after dependencies installation
      debug:
        msg: "Progress: 25% - Dependencies installed"

    - name: Check Go version
      shell: go version
      register: go_version_check
      ignore_errors: yes

    - name: Install and configure Go
      block:
        - name: Download Go
          get_url:
            url: "https://golang.org/dl/go{{ GO_VERSION }}.linux-amd64.tar.gz"
            dest: "/tmp/go{{ GO_VERSION }}.linux-amd64.tar.gz"
          
        - name: Remove existing Go installation
          file:
            path: /usr/local/go
            state: absent
          
        - name: Extract Go archive
          unarchive:
            src: "/tmp/go{{ GO_VERSION }}.linux-amd64.tar.gz"
            dest: /usr/local
            remote_src: yes
          
        - name: Clean up Go archive
          file:
            path: "/tmp/go{{ GO_VERSION }}.linux-amd64.tar.gz"
            state: absent
          
        - name: Add Go to PATH in .bashrc
          lineinfile:
            path: "{{ ansible_env.HOME }}/.bashrc"
            line: 'export PATH=$PATH:/usr/local/go/bin'
            
        - name: Update Ansible environment PATH
          set_fact:
            ansible_env: "{{ ansible_env | combine({'PATH': ansible_env.PATH + ':/usr/local/go/bin'}) }}"
          
        - name: Verify Go installation
          shell: go version
          register: go_version_verify
          environment: "{{ ansible_env }}"
          
        - name: Display Go version
          debug:
            var: go_version_verify.stdout
            
      when: go_version_check.rc != 0 or GO_VERSION not in go_version_check.stdout

    - name: Display progress after Go installation
      debug:
        msg: "Progress: 35% - Go installed"

    - name: Stop Story services if running
      systemd:
        name: "{{ item }}"
        state: stopped
      loop:
        - story-consensus-node
        - story-geth-node
      ignore_errors: yes

    - name: Remove existing geth binary
      file:
        path: "/usr/local/bin/geth"
        state: absent
      ignore_errors: yes

    - name: Remove existing story binary
      file:
        path: "/usr/local/bin/story"
        state: absent
      ignore_errors: yes

    - name: Download and install story-geth
      get_url:
        url: "https://github.com/piplabs/story-geth/releases/download/v{{ geth_version }}/geth-linux-amd64"
        dest: "/usr/local/bin/geth"
        mode: '0755'
        force: yes

    - name: Download and install story binary
      get_url:
        url: "https://github.com/piplabs/story/releases/download/v{{ story_version }}/story-linux-amd64"
        dest: "/usr/local/bin/story"
        mode: '0755'
        force: yes


    - name: Display progress after binaries installation
      debug:
        msg: "Progress: 45% - Story and Geth binaries installed"

    - name: Create data directories
      file:
        path: "{{ home_dir }}/.story/{{ item }}"
        state: directory
      loop:
        - geth
        - story

    - name: Initialize story node
      shell: story init --network odyssey --moniker "{{ moniker }}" --force

    - name: Display progress after node initialization
      debug:
        msg: "Progress: 55% - Node initialized"

    - name: Create story-consensus-node service
      template:
        src: templates/story-consensus-node.service.j2
        dest: /etc/systemd/system/story-consensus-node.service
        mode: '0644'

    - name: Create story-geth-node service
      template:
        src: templates/story-geth-node.service.j2
        dest: /etc/systemd/system/story-geth-node.service
        mode: '0644'

    - name: Reload systemd daemon
      systemd:
        daemon_reload: yes

    - name: Ensure services are stopped
      systemd:
        name: "{{ item }}"
        state: stopped
        enabled: yes
      loop:
        - story-consensus-node
        - story-geth-node
    
    
    - name: Get latest snapshot filenames
      uri:
        url: "{{ SNAPSHOT_BASE_URL }}"
        return_content: yes
      register: snapshot_page

    - name: Extract all snapshot filenames
      set_fact:
        story_snapshots: "{{ snapshot_page.content | regex_findall('story_\\d{4}-\\d{2}-\\d{2}_\\d+_snap\\.tar\\.lz4') }}"
        geth_snapshots: "{{ snapshot_page.content | regex_findall('geth_story_\\d{4}-\\d{2}-\\d{2}_\\d+_snap\\.tar\\.lz4') }}"

    - name: Sort snapshots and get the latest
      set_fact:
        story_snapshot_filename: "{{ story_snapshots | sort | last }}"
        geth_snapshot_filename: "{{ geth_snapshots | sort | last }}"

    - name: Display snapshot filenames
      debug:
        msg: 
          - "Downloading Story snapshot: {{ story_snapshot_filename }}"
          - "Downloading Geth snapshot: {{ geth_snapshot_filename }}"

    - name: Check if priv_validator_state.json exists
      stat:
        path: "{{ home_dir }}/.story/story/data/priv_validator_state.json"
      register: priv_validator_state

    - name: Backup priv_validator_state.json if it exists
      copy:
        src: "{{ home_dir }}/.story/story/data/priv_validator_state.json"
        dest: "{{ home_dir }}/.story/story/priv_validator_state.json.backup"
        remote_src: yes
      when: priv_validator_state.stat.exists

    - name: Remove old Story data
      file:
        path: "{{ home_dir }}/.story/story/data"
        state: absent
    
    
    - name: Download Story snapshot using aria2c
      shell: |
        aria2c -x 16 -s 16 {{ SNAPSHOT_BASE_URL }}{{ story_snapshot_filename }} -d /root/
      args:
        executable: /bin/bash
      register: download_story_result
      tags:
        - snapshot

    - name: Show Story snapshot download result
      debug:
        msg: "Story snapshot download completed: {{ download_story_result.rc == 0 }}"
      tags:
        - snapshot

    - name: Display progress after snapshot download
      debug:
        msg: "Progress: 65% - Snapshots downloaded"

    - name: Extract Story snapshot
      shell: |
        lz4 -cd "/root/{{ story_snapshot_filename }}" | tar -xf - -C {{ home_dir }}/.story/story
      args:
        executable: /bin/bash
      register: extract_story_output
      tags:
        - snapshot

    - name: Display progress after snapshot extraction
      debug:
        msg: "Progress: 75% - Snapshots extracted"

    - name: Remove downloaded Story snapshot file
      file:
        path: "/root/{{ story_snapshot_filename }}"
        state: absent
      when: extract_story_output.rc == 0

    - name: Restore priv_validator_state.json if backup exists
      copy:
        src: "{{ home_dir }}/.story/story/priv_validator_state.json.backup"
        dest: "{{ home_dir }}/.story/story/data/priv_validator_state.json"
        remote_src: yes
      when: priv_validator_state.stat.exists

    - name: Ensure Geth data directory exists
      file:
        path: "{{ home_dir }}/.story/geth/odyssey/geth"
        state: directory
        mode: '0755'
    
    - name: Remove old Geth data
      file:
        path: "{{ home_dir }}/.story/geth/odyssey/geth/chaindata"
        state: absent

    
    - name: Download Geth snapshot using aria2c
      shell: |
        aria2c -x 16 -s 16 {{ SNAPSHOT_BASE_URL }}{{ geth_snapshot_filename }} -d /root/
      args:
        executable: /bin/bash
      register: download_geth_result
      tags:
        - snapshot

    - name: Show Geth snapshot download result
      debug:
        msg: "Geth snapshot download completed: {{ download_geth_result.rc == 0 }}"
      tags:
        - snapshot

    - name: Display progress after snapshot download
      debug:
        msg: "Progress: 65% - Snapshots downloaded"

    - name: Extract Geth snapshot
      shell: |
        lz4 -cd "/root/{{ geth_snapshot_filename }}" | tar -xf - -C {{ home_dir }}/.story/geth/odyssey/geth
      args:
        executable: /bin/bash
      register: extract_geth_output
      tags:
        - snapshot

    - name: Display progress after snapshot extraction
      debug:
        msg: "Progress: 75% - Snapshots extracted"

    - name: Remove downloaded Geth snapshot file
      file:
        path: "/root/{{ geth_snapshot_filename }}"
        state: absent
      when: extract_geth_output.rc == 0
    
    - name: Fetch peers
      shell: |
        curl -sS {{ PEERS_URL }} | jq -r '.result.peers[] | "\(.node_info.id)@\(.remote_ip):\(.node_info.listen_addr)"' | awk -F ':' '{print $1":"$(NF)}' | paste -sd, -
      register: peers

    
    - name: Set custom ports in story.toml
      replace:
        path: "{{ APP_HOME }}/story/config/story.toml"
        regexp: "{{ item.regexp }}"
        replace: "{{ item.replace }}"
      with_items:
        - { regexp: ':1317', replace: ':{{ STORY_PORT }}317' }
        - { regexp: ':8551', replace: ':{{ STORY_PORT }}551' }

    - name: Set custom ports in config.toml
      replace:
        path: "{{ APP_HOME }}/story/config/config.toml"
        regexp: "{{ item.regexp }}"
        replace: "{{ item.replace }}"
      with_items:
        - { regexp: ':26658', replace: ':{{ STORY_PORT }}658' }
        - { regexp: ':26657', replace: ':{{ STORY_PORT }}657' }
        - { regexp: ':26656', replace: ':{{ STORY_PORT }}656' }
        - { regexp: ':26660', replace: ':{{ STORY_PORT }}660' }

    
    - name: Update config.toml with peers
      lineinfile:
        path: "{{ home_dir }}/.story/story/config/config.toml"
        regexp: '^persistent_peers *=.*'
        line: 'persistent_peers = "{{ peers.stdout }}"'
        backup: yes
    
    - name: Download addrbook.json
      get_url:
        url: "{{ ADDRBOOK_URL }}"
        dest: "{{ ADDRBOOK_FILE }}"    
    
    
    - name: Clean up downloaded tar.gz files
      file:
        path: "{{ item }}"
        state: absent
      loop:
        - "geth-linux-amd64-*"
        - "story-linux-amd64-*"
 
    - name: Export validator EVM key
      shell: story validator export --export-evm-key
      register: evm_key_export

    - name: Display private key location
      debug:
        msg: "The EVM private key is saved at: {{ home_dir }}/.story/story/config/private_key.txt"

    - name: Restore keys if backup exists
      block:
        - name: Check if backup exists
          stat:
            path: "{{ WALLET_BACKUP_DIR }}/private_key.txt"
          register: backup_exists

        - name: Restore key files
          copy:
            src: "{{ WALLET_BACKUP_DIR }}/{{ item.src }}"
            dest: "{{ item.dest }}"
            mode: '0600'
          with_items:
            - { src: 'private_key.txt', dest: '{{ APP_HOME }}/story/config/private_key.txt' }
            - { src: 'priv_validator_key.json', dest: '{{ APP_HOME }}/story/config/priv_validator_key.json' }
            - { src: 'node_key.json', dest: '{{ APP_HOME }}/story/config/node_key.json' }
            - { src: 'priv_validator_state.json', dest: '{{ APP_HOME }}/story/data/priv_validator_state.json' }
          when: backup_exists.stat.exists
          ignore_errors: yes

        - name: Display restore message
          debug:
            msg: "Keys restored from backup"
          when: backup_exists.stat.exists

    - name: start story-geth-node service
      systemd:
        name: story-geth-node
        state: started    

    - name: Wait for geth initialization
      pause:
        seconds: 5

    - name: start story-consensus-node service
      systemd:
        name: story-consensus-node
        state: started

    - name: Display final progress
      debug:
        msg: "Progress: 100% - Story node installation completed"
    
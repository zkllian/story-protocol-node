---
# Playbook to update Story Protocol nodes (both Geth and Consensus nodes)
- name: Update Story Protocol Nodes (Geth and Consensus)
  hosts: localhost
  become: true
  gather_facts: false

  vars:
    story_version: "0.13.0"
    geth_version: "0.11.0"
    home_dir: "/root"
    app: "all"  # Default value, can be overridden with -e app="geth" or app="story"

  tasks:
    # Stop services based on app parameter
    - name: Stop Story services
      systemd:
        name: "{{ item }}"
        state: stopped
      loop:
        - "{{ (app in ['story', 'all']) | ternary('story-consensus-node', '') }}"
        - "{{ (app in ['geth', 'all']) | ternary('story-geth-node', '') }}"
      when: item != ''

    # Kill Story process if updating story
    - name: Check and kill remaining story process
      shell: |
        for pid in $(pgrep -f "/usr/local/bin/story run"); do
          echo "Force stopping story process (PID: $pid)..."
          kill -15 $pid
          sleep 2
          if ps -p $pid > /dev/null; then
            echo "Process still running, using SIGKILL..."
            kill -9 $pid
          fi
        done
        rm -f /root/.story/story/data/application.db/LOCK
      ignore_errors: yes
      when: app in ['story', 'all']

    # Kill Geth process if updating geth
    - name: Check and kill remaining geth process
      shell: |
        for pid in $(pgrep -f "/usr/local/bin/geth.*--odyssey"); do
          echo "Force stopping geth process (PID: $pid)..."
          kill -15 $pid
          sleep 2
          if ps -p $pid > /dev/null; then
            echo "Process still running, using SIGKILL..."
            kill -9 $pid
          fi
        done
      ignore_errors: yes
      when: app in ['geth', 'all']

    # Remove binaries based on app parameter
    - name: Remove existing binaries
      file:
        path: "{{ item }}"
        state: absent
      loop:
        - "{{ (app in ['story', 'all']) | ternary('/usr/local/bin/story', '') }}"
        - "{{ (app in ['geth', 'all']) | ternary('/usr/local/bin/geth', '') }}"
      when: item != ''

    # Download and install story-geth if needed
    - name: Download and install story-geth
      get_url:
        url: "https://github.com/piplabs/story-geth/releases/download/v{{ geth_version }}/geth-linux-amd64"
        dest: "/usr/local/bin/geth"
        mode: '0755'
        force: yes
      when: app in ['geth', 'all']

    # Download and install story binary if needed
    - name: Download and install story binary
      get_url:
        url: "https://github.com/piplabs/story/releases/download/v{{ story_version }}/story-linux-amd64"
        dest: "/usr/local/bin/story"
        mode: '0755'
        force: yes
      when: app in ['story', 'all']

    # Verify story version if updated
    - name: Check story version
      shell: |
        story version | head -n 1 | awk '{print $2}'
      register: story_version_output
      when: app in ['story', 'all']

    # Verify geth version if updated
    - name: Check geth version
      shell: |
        geth version | head -n 1
      register: geth_version_output
      when: app in ['geth', 'all']

    # Start services based on app parameter
    - name: Start Story geth service
      systemd:
        name: story-geth-node
        state: started
      when: app in ['geth', 'all']

    # Wait for geth initialization if needed
    - name: Wait for geth initialization
      pause:
        seconds: 5
      when: app in ['all']

    # Start Story consensus service if needed
    - name: Start Story consensus service
      systemd:
        name: story-consensus-node
        state: started
      when: app in ['story', 'all']

    # Display update results
    - name: Display update results
      debug:
        msg:
          - "{{ 'Story version: ' + story_version_output.stdout if (app in ['story', 'all'] and story_version_output.stdout is defined) else '' }}"
          - "{{ 'Geth version: ' + geth_version_output.stdout if (app in ['geth', 'all'] and geth_version_output.stdout is defined) else '' }}"


